# ------------------------- PROBLEM # 1 -------------------------

# If we list all the natural numbers below 10 that are multiples of 3 or 5, 
# we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.

def sum_of_multiples_of_3_or_5(n)
    multiples_of_3 = (1...n).select { |el| el % 3 == 0 }
    multiples_of_5 = (1...n).select { |el| el % 5 == 0 }
    multiples_of_3.sum + multiples_of_5.sum
end 

# p sum_of_multiples_of_3_or_5(10)
# p sum_of_multiples_of_3_or_5(1000)


# ------------------------- PROBLEM # 2 -------------------------

# Each new term in the Fibonacci sequence is generated by adding 
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not 
# exceed four million, find the sum of the even-valued terms.

def sum_of_even_valued_fibonacci_nums(ceiling_num)
    fib_nums = [1, 2]
    while fib_nums[-1] < ceiling_num
        fib_nums << fib_nums[-2] + fib_nums[-1]
    end 

    fib_nums.select { |num| num.even? }.sum
end 

# p sum_of_even_valued_fibonacci_nums(4000000)


# ------------------------- PROBLEM # 3 -------------------------

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143 ?

def prime?(n)
    (2...n).none? { |num| n % num == 0 }
end 

def factors(n)
    (1..n).select { |num| n % num == 0 }
end 

def largest_prime_factor(num)
    num_factors = factors(num)
    prime_factors = num_factors.select { |n| prime?(n) }
    prime_factors.max
end

# p largest_prime_factor(13195)
# p largest_prime_factor(600851475143)


# ------------------------- PROBLEM # 4 -------------------------

# A palindromic number reads the same both ways. The largest palindrome 
# made from the product of two 2-digit numbers is 9009 = 91 × 99.
# Find the largest palindrome made from the product of two 3-digit numbers.

def largest_palindromic_num
    999.downto(100) do |x|
        999.downto(100) do |y|
            product = x * y
            return product if palindrome?(product)
        end
    end 
end 

def palindrome?(num)
    num.to_s == num.to_s.reverse
end

# system("clear")
# p largest_palindromic_num


# ------------------------- PROBLEM # 5 -------------------------

# 2520 is the smallest number that can be divided by each of the numbers 
# from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible by all of 
# the numbers from 1 to 20?

def smallest_num_divisible_by_all_nums_under_20
    test = 20
    until divisible_by_all?(test)
        test += 20
    end 
    test
end 

def divisible_by_all?(num)
    (1..20).all? { |n| num % n == 0 }
end

# p smallest_num_divisible_by_all_nums_under_20


# ------------------------- PROBLEM # 6 -------------------------

# The sum of the squares of the first ten natural numbers is,
# 1**2 + 2**2 + ... + 10**2 = 385
# The square of the sum of the first ten natural numbers is,
# (1 + 2 + ... + 10)**2 = 55**2 = 3025
# Hence the difference between the sum of the squares of the first ten 
# natural numbers and the square of the sum is 3025 − 385 = 2640.
# Find the difference between the sum of the squares of the first one 
# hundred natural numbers and the square of the sum.

def difference_between_sum_squares_and_square_of_sum(top_num)
    square_of_sum(top_num) - sum_squares(top_num)
end 

def sum_squares(num)
    (1..num).inject { |sum, n| sum += (n ** 2) }
end 

def square_of_sum(num)
    (1..num).inject(:+) ** 2
end 

# p difference_between_sum_squares_and_square_of_sum(10)
# p difference_between_sum_squares_and_square_of_sum(100)


# ------------------------- PROBLEM # 7 -------------------------

# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we 
# can see that the 6th prime is 13.
# What is the 10 001st prime number?

def nth_prime_num(num)
    primes = []
    i = 2
    until primes.length == num 
        primes << i if prime?(i)
        i += 1
    end 
    primes.max
end 

def prime?(num)
    (2...num).none? { |n| num % n == 0 }
end

# p nth_prime_num(10001)


# ------------------------- PROBLEM # 8 -------------------------

# The four adjacent digits in the 1000-digit number that have the greatest 
# product are 9 × 9 × 8 × 9 = 5832.

number = "73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"

# Find the thirteen adjacent digits in the 1000-digit number that have the 
# greatest product. What is the value of this product?

def greatest_product_of_nth_adjacent_digits(number_string, n)
    number_array = number_string.delete("\n").split("").map(&:to_i)
    largest_product = 0
    largest_product_nums = []

    i = 0
    while i < number_array.length - n
        nth_nums = number_array[i...i+n]
        current_product = nth_nums.inject(&:*)
        if largest_product < current_product
            largest_product = current_product
            largest_product_nums = nth_nums
        end 
        i += 1
    end 

    p largest_product
    p largest_product_nums
end

# greatest_product_of_nth_adjacent_digits(number, 13)


# ------------------------- PROBLEM # 9 -------------------------

# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
# a**2 + b**2 = c**2
# For example, 3**2 + 4**2 = 9 + 16 = 25 = 5**2.
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.

def find_pythagorean_triplet(triplet_sum)
    max = triplet_sum / 2
    min = Math.sqrt(triplet_sum).to_i
    
    (min..max).each do |a|
        ((a+1)..max).each do |b|
            c = Math.sqrt(a**2 + b**2).to_i
            sum = a + b + c 
            if sum > triplet_sum 
                break 
            elsif sum == triplet_sum && (a**2 + b**2 == c**2)
                puts "a = #{a}, b = #{b}, c = #{c}"
                puts "The product of abc = #{(a * b * c).to_s}"
            end 
        end 
    end 
end

# find_pythagorean_triplet(1000)


# ------------------------- PROBLEM # 10 -------------------------

# The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
# Find the sum of all the primes below two million.

def sum_of_primes_below_target(target)
    primes = (2...target).select { |num| is_prime?(num) }
    primes.inject(&:+)
end 

def is_prime?(num)
    if num < 2 
        return false
    end 

    (2...num).none? { |n| num % n == 0 }
end 

# p sum_of_primes_below_target(2000000)